import { useState } from "react";
import { useNavigate } from "react-router-dom";

import { FilterHeader } from "../../../components/Note/FilterHeader";
import { TagChip } from "../../../components/Note/common/TagChip";
import { BottomSheet } from "../../../components/Note/NoteDetail/BottomSheet";
import { DeletePopup } from "../../../components/Note/NoteDetail/DeletePopup";
import { ImageIndicator } from "../../../components/Note/NoteDetail/ImageIndicator";

import calendarBlue from "../../../assets/icons/calendar-blue.svg";
import locationBlue from "../../../assets/icons/location-blue.svg";
import musicBlue from "../../../assets/icons/music-blue.svg";

import s from "./index.module.scss";
import { Navigate } from "react-router-dom";

// TODO: To be changed to real data(API)
const mockData = {
  year: 2023,
  country: "Î™ΩÍ≥®",
  flag: "/src/assets/countryFlags/Mongolia.svg",
  title: "Î™ΩÍ≥® 8ÏùºÏ∞®üê¥ ÎßêÌÉÄÍ≥† Ï¥àÏõê Îã¨Î¶∞ ÎÇ†",
  date: "2023.07.15",
  location: "ÏöúÎßÅÏïî ÌòëÍ≥° ÏÇ¨Ïù¥",
  music: "BOL4 - TRAVEL",
  images: [
    "/src/assets/images/note1.png",
    "/src/assets/images/note2.png",
    "/src/assets/images/sushi.jpg",
  ],
  description: `ÏÉùÍ∞ÅÎ≥¥Îã§ Ïû¨Î∞åÎçò ÎßêÌÉÄÍ∏∞üê¥ ÎßêÏù¥ ÏóÑÏ≤≠ÎÇòÍ≤å ÌÅ∞ ÎèôÎ¨º
  Ïù¥ÎûÄ Í≤ÉÎèÑ Ï≤òÏùå ÏïåÏïòÎã§. ÎßêÏóê Ïò¨ÎùºÍ∞ÄÏûê Î∞îÎã•Ïù¥ ÍΩ§ Î©ÄÏñ¥ÏÑú Ï≤òÏùåÏóêÎäî ÏÇ¥Ïßù Í∏¥Ïû•ÌñàÏßÄÎßå ÎÇòÏ§ëÏóêÎäî Ï†ÅÏùëÌï¥ÏÑú Ïû¨Î∞åÏóàÎã§!
  ÏºÄÏù¥ÏôÄ Î¶øÏùÄ ÏäπÎßàÍ∞Ä Ï≤òÏùåÏù¥Îùº ÌñàÎäîÎç∞ Î∞îÎ°ú Ï†ÅÏùëÌï¥ÏÑú Ïã†ÎÇòÍ≤å ÏïûÏúºÎ°ú ÎÇòÍ∞ÄÏÑú ÎÑòÎÑò Î∂ÄÎü¨Ïõ†Îã§ü•∫ 
  
  Î∞òÏßÄÏùò Ï†úÏôï ÏÑ∏Ìä∏Ïû•Ïóê Îì§Ïñ¥Ïò® ÎìØÌïú ÌòëÍ≥° ÏÇ¨Ïù¥Î•º Ï≤úÏ≤úÌûà Í±∑Îã§ Î≥¥ÎãàÍπå Î∞òÏßÄÏõêÏ†ïÎåÄÍ∞Ä Îêú Í∏∞Î∂ÑÏù¥ÏóàÎã§`,
};
const {
  year,
  country,
  flag,
  title,
  date,
  location,
  music,
  images,
  description,
} = mockData;

export function NoteDetail() {
  const [isMenuOpen, setIsMenuOpen] = useState(false);
  const [isPopupOpen, setIsPopupOpen] = useState(false);
  const [imageIdx, setImageIdx] = useState(0);

  const handleOpenMenu = () => {
    setIsMenuOpen(true);
  };

  const handleCloseMenu = () => {
    setIsMenuOpen(false);
  };

  const handleOpenPopup = () => {
    setIsMenuOpen(false);
    setIsPopupOpen(true);
  };

  const handleClosePopup = () => {
    setIsPopupOpen(false);
  };

  const handleDeletePage = () => {
    // TODO: ÌéòÏù¥ÏßÄ ÏÇ≠Ï†ú API Ìò∏Ï∂ú
    // ÏïÑÎûòÎäî ÏûÑÏãú
    setIsPopupOpen(false);
    console.log("ÌéòÏù¥ÏßÄ ÏÇ≠Ï†ú API Ìò∏Ï∂ú");
    navigate("/note");
  };

  const handleChangeImage = (idx: number) => {
    setImageIdx(idx);
  };

  const navigate = useNavigate();

  return (
    <div className={s.container}>
      <FilterHeader title={title} hasMenu onClickMenu={handleOpenMenu} />
      {/* TODO: Ïª¥Ìè¨ÎÑåÌä∏Î°ú Î∂ÑÎ¶¨ */}
      <div className={s.summaryWrapper}>
        <div className={s.titleWrapper}>
          <TagChip year={year} country={country} flag={flag} />
          <div className={s.title}>{title}</div>
        </div>
        <div className={s.infoWrapper}>
          <div className={s.dateWrapper}>
            <img className={s.icon} src={calendarBlue} alt="Îã¨Î†• ÏïÑÏù¥ÏΩò" />
            <span className={s.infoType}>ÎÇ†Ïßú</span>
            <span>{date}</span>
          </div>
          <div className={s.locationWrapper}>
            <img className={s.icon} src={locationBlue} alt="ÏúÑÏπò ÏïÑÏù¥ÏΩò" />
            <span className={s.infoType}>Ïû•ÏÜå</span>
            {country}
            <br />
            {location}
          </div>
          <div className={s.musicWrapper}>
            <img className={s.icon} src={musicBlue} alt="ÏùåÏïÖ ÏïÑÏù¥ÏΩò" />
            <span className={s.infoType}>BGM</span>
            <span>{music}</span>
          </div>
        </div>
      </div>
      <img className={s.image} src={images[imageIdx]} alt="ÎÖ∏Ìä∏ Ïù¥ÎØ∏ÏßÄ" />
      <div className={s.flex}>
        <div className={s.ellipseWrapper}>
          {images.map((_, idx) => (
            <ImageIndicator
              key={idx}
              idx={idx}
              isActive={idx === imageIdx}
              onClick={handleChangeImage}
            />
          ))}
        </div>
      </div>
      <div className={s.descriptionWrapper}>
        {description.split("\n").map((line, index) => (
          <p key={index}>
            {line}
            <br />
          </p>
        ))}
      </div>
      {isMenuOpen && (
        <BottomSheet onClose={handleCloseMenu} onDelete={handleOpenPopup} />
      )}
      {isPopupOpen && (
        <DeletePopup onClose={handleClosePopup} onDelete={handleDeletePage} />
      )}
    </div>
  );
}
